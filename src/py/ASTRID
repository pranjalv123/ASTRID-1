#!/usr/bin/env python

import argparse
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)) + '/lib/python/')

import dendropy
from ASTRID import ASTRID

    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description= "ASTRID: Accurate Species TRees from Internode Distances.")

    parser.add_argument('-i', '--input', required=True, dest='input',
                        help="File containing gene trees as newick strings")
    parser.add_argument("-b --bsfile", dest="bsfile",
                        help="File containing a list of bootstrap replicate files, one file per gene")
    parser.add_argument("--bslist", dest="bslist", nargs = '+',
                        help="List of bootstrap files")
    parser.add_argument("-r --bsreps", dest="bsreps", default=100, type=int,
                        help="Number of bootstrap replicates")
    parser.add_argument('-o', '--output', dest='output',
                        help="Output file for species tree")
    parser.add_argument('-m', '--method', default='auto', dest='method',
                        help="Distance-based method to use (default: fastme if the distance matrix is complete, bionj otherwise")
    parser.add_argument('-c', '--cache', dest='cache',
                        help="Save distance matrix in PHYLIP format, or use cached matrix if it exists (useful for trying multiple distance-based methods)")
    parser.add_argument('--taxon-cutoff', dest='taxon_cutoff', default=0, type=int,
                        help="Only take trees with at least this many taxa")
    parser.add_argument('--impute-const', dest='impute_const', type=float,
                        help="Fill in missing matrix entries with a constant")
    parser.add_argument('--impute-tree', dest='impute_tree',
                        help="Fill in missing matrix entries with distances from a reference tree")
    parser.add_argument('--backbone', dest='backbone',
                        help="Backbone tree for completion")    
#    parser.add_argument('--impute-matrix', dest='impute_matrix',
#                        help="Fill in missing matrix entries with distances from a reference matrix")    
    
    args = parser.parse_args()


    method = args.method
    fname = args.cache

    bslist = None
    if vars(args)['bslist']:
        bslist = args.bslist
    elif vars(args)['bsfile']:
        bslist = [i.strip() for i in open(args.bsfile).readlines()]

    if vars(args)['impute_tree']:
        impute_tree = args.impute_tree
    else:
        impute_tree = None
    if vars(args)['impute_const']:
        impute_const = args.impute_const
    else:
        impute_const = None


    a = ASTRID(open(args.input).read(), True, impute_tree, impute_const)
    a.run(method, fname, args.taxon_cutoff)

    print "ASTRID tree:"
    print a.tree_str()
    if vars(args)['output']:
        a.write_tree(args.output)
    
    if bslist:
        print "Running bootstrap replicates..."
        bstrees = dendropy.TreeArray(taxon_namespace = a.tree.taxon_namespace)
        nbs =  args.bsreps
        
        bsreps = [[] for i in range (nbs)]
        
        for f in bslist:
            trees = open(f).readlines()
            for i in range(min(nbs, len(trees))):
                bsreps[i].append(trees[i])
            if len(bsreps[0]) % 10 == 0:
                print "Read", len(bsreps[0]), "bootstrap files"

        if vars(args)['output']:
            outfile = open(args.output + '.bs', 'w')
            
        for i, bsrep_str  in enumerate(bsreps):
            print "Bootstrap Replicate", i + 1
            bsrep = ''.join(bsrep_str)
            bsa = ASTRID(bsrep)
            bsa.run(method, None, args.taxon_cutoff)
            bsa.tree.migrate_taxon_namespace(a.tree.taxon_namespace)
            bstrees.add_tree(bsa.tree)
            print bsa.tree_str()
            if vars(args)['output']:
                outfile.write(bsa.tree_str())

        consensustree = bstrees.consensus_tree(set_support_as_node_label = True, support_as_percentages=True)
        print "Majority consensus tree:"
        for n in consensustree.nodes():
            for an in n.annotations:
                if an.name != 'support':
                    n.annotations.remove(an)
        for e in consensustree.edges():
            e.annotations.clear()
#        consensustree.reroot_at_midpoint()
        cs_str = str(consensustree.as_string('newick', suppress_edge_lengths=True, suppress_internal_node_labels=False, suppress_annotations=True, preserve_spaces=True, unquoted_underscores=True, suppress_rooting=True))
        print cs_str
        if vars(args)['output']:
            open(args.output + '.bs_consensus', 'w').write(cs_str)

        
        atree = bstrees.summarize_splits_on_tree(a.tree, set_support_as_node_label = True, support_as_percentages=True)
        print "ASTRID tree with support:"
        for n in a.tree.nodes() + a.tree.edges():
            for an in n.annotations:
                if an.name != 'support':
                    n.annotations.remove(an)
        for e in a.tree.edges():
            e.annotations.clear()

        astrid_str = str(a.tree.as_string('newick', suppress_edge_lengths=True, suppress_internal_node_labels=False, suppress_annotations=True, preserve_spaces=True, unquoted_underscores=True, suppress_rooting=True))
        print astrid_str
        if vars(args)['output']:
            open(args.output + '.bs_tree', 'w').write(astrid_str)
        
            
